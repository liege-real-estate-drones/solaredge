import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:solaredge_monitor/data/models/weather_data.dart';
import 'package:solaredge_monitor/data/services/open_meteo_weather_service.dart';
import 'package:solaredge_monitor/data/services/location_service.dart';
import 'package:solaredge_monitor/data/services/service_manager.dart'; // Import pour ServiceManager
import 'package:geolocator/geolocator.dart'; // Import pour Geolocator, Position, LocationPermission, LocationAccuracy
// Importer ChangeNotifier
import 'package:flutter/material.dart';

/// Service centralis√© pour g√©rer les donn√©es m√©t√©o dans toute l'application
/// Utilise un pattern Singleton et notifie les changements via ChangeNotifier et Streams
class WeatherManager with ChangeNotifier {
  // --- Singleton ---
  static final WeatherManager _instance = WeatherManager._internal();
  factory WeatherManager() => _instance;
  WeatherManager._internal();

  // --- D√©pendances Internes ---
  // Le manager cr√©e et utilise ses propres instances de services d√©pendants
  final OpenMeteoWeatherService _weatherService = OpenMeteoWeatherService();
  final LocationService _locationService = LocationService();

  // Ajouter une d√©pendance vers ServiceManager pour acc√©der facilement aux UserPreferences
  // Cela suppose que WeatherManager est instanci√© l√† o√π il peut recevoir ServiceManager
  // ou y acc√©der via un singleton/Provider si ce n'est pas d√©j√† le cas.
  // Pour cet exemple, nous allons supposer qu'il peut acc√©der √† ServiceManager.userPreferencesNotifier.value

  final ServiceManager _serviceManager = ServiceManager(); // Acc√®s direct au singleton, √† adapter si vous utilisez GetIt diff√©remment.


  // --- √âtat Interne ---
  WeatherData? _currentWeather;
  WeatherForecast?
      _weatherForecastInternal; // Renomm√© pour √©viter confusion avec getter public
  DateTime? _lastWeatherUpdate;
  DateTime? _lastForecastUpdate;
  DateTime? _lastForecastApiCall; // Timestamp of the last actual API call for forecast

  double? _latitude;
  double? _longitude;
  String? _locationSource;

  // Dur√©e de validit√© du cache
  static const Duration _cacheValidityDuration = Duration(minutes: 15);

  // --- Contr√¥leurs de Stream (pour compatibilit√© si des parties de l'app les utilisent encore) ---
  // Note: Avec ChangeNotifier, les Streams deviennent moins essentiels pour l'UI directe via Provider
  late StreamController<WeatherData?> _weatherController;
  late StreamController<WeatherForecast?> _forecastController;
  late StreamController<(double, double)?> _locationController;

  bool _areControllersInitialized = false;
  bool _areControllersClosed = false;

  // --- Streams Publics ---
  Stream<WeatherData?> get weatherStream => _weatherController.stream;
  Stream<WeatherForecast?> get forecastStream => _forecastController.stream;
  Stream<(double, double)?> get locationStream => _locationController.stream;

  // --- Getters Publics (pour l'acc√®s via Provider) ---
  WeatherData? get currentWeather => _currentWeather;
  WeatherForecast? get weatherForecast => _weatherForecastInternal;
  // Exposer la latitude et la longitude
  double? get latitude => _latitude;
  double? get longitude => _longitude;
  String? get locationSource => _locationSource; // Optionnel, mais peut √™tre utile

  // --- Flags de Chargement ---
  bool _isLoadingWeather = false;
  bool _isLoadingForecast = false;
  bool _isLoadingLocation = false;
  // Getter pour l'√©tat de chargement global (optionnel)
  bool get isLoading =>
      _isLoadingWeather || _isLoadingForecast || _isLoadingLocation;


  /// Initialise le service et charge les donn√©es n√©cessaires.
  /// Appel√© une fois par ServiceManager.
  Future<void> initialize() async {
    // √âvite les r√©-initialisations multiples si d√©j√† fait
    if (_areControllersInitialized) return;

    debugPrint('üå§Ô∏è Initialisation du WeatherManager...');
    _initStreamControllers();
    await loadLocation(isInitializing: true);
    // Charger les donn√©es sans forcer le refresh au d√©marrage
    // Les m√©thodes appel√©es vont notifier si des donn√©es sont charg√©es
    await getCurrentWeather(forceRefresh: false, isInitializing: true);
    await getWeatherForecast(forceRefresh: false, isInitializing: true);
    debugPrint('‚úÖ WeatherManager initialis√©.');
  }

  /// Initialise les contr√¥leurs de flux de mani√®re s√ªre.
  void _initStreamControllers() {
    // Si d√©j√† initialis√©s et non ferm√©s, ne rien faire
    if (_areControllersInitialized && !_areControllersClosed) return;

    // (R√©)Initialiser les contr√¥leurs
    _weatherController = StreamController<WeatherData?>.broadcast();
    _forecastController = StreamController<WeatherForecast?>.broadcast();
    _locationController = StreamController<(double, double)?>.broadcast();

    _areControllersInitialized = true;
    _areControllersClosed = false; // Marquer comme ouverts
    debugPrint('üìä WeatherManager: StreamControllers initialis√©s.');
  }

  /// Charge les coordonn√©es de localisation (depuis cache ou appareil) en fonction de la pr√©f√©rence utilisateur.
  Future<void> loadLocation({bool isInitializing = false}) async {
    if (_isLoadingLocation && !isInitializing) return;
    _isLoadingLocation = true;
    if (!isInitializing) {
      notifyListeners(); // Notifier que le chargement commence
    }

    // R√©cup√©rer les pr√©f√©rences utilisateur
    // Note: Assurez-vous que _serviceManager est initialis√© et accessible.
    final userPrefs = _serviceManager.userPreferencesNotifier.value;
    final weatherSourcePref = userPrefs?.weatherLocationSource ?? 'site_primary';

    debugPrint('üå¶Ô∏è WeatherManager: loadLocation - Pr√©f√©rence source m√©t√©o: $weatherSourcePref');

    try {
      if (weatherSourcePref == 'device_gps') {
        debugPrint('üåç WeatherManager: Tentative de r√©cup√©ration de la position GPS de l\'appareil pour la m√©t√©o...');
        // V√©rifier la permission
        // Note: Geolocator est n√©cessaire ici. Assurez-vous qu'il est import√© et configur√©.
        // import 'package:geolocator/geolocator.dart';
        // import 'package:geolocator_platform_interface/geolocator_platform_interface.dart'; // Peut √™tre n√©cessaire pour LocationPermission
        // Si vous n'avez pas Geolocator, vous devrez l'ajouter √† pubspec.yaml
        // Pour l'exemple, je vais ajouter l'import ici, mais vous devrez l'installer si ce n'est pas fait.
        // import 'package:geolocator/geolocator.dart'; // Assurez-vous que cet import est pr√©sent

        LocationPermission permission = await Geolocator.checkPermission();
        if (permission == LocationPermission.denied) {
          permission = await Geolocator.requestPermission();
          if (permission == LocationPermission.denied || permission == LocationPermission.deniedForever) {
            debugPrint('‚ùå WeatherManager: Permission GPS refus√©e.');
            // Fallback sur les coordonn√©es du site si GPS refus√©
            await _loadSitePrimaryCoordinates();
            return; // Sortir apr√®s le fallback
          }
        }

        if (permission == LocationPermission.deniedForever) {
             debugPrint('‚ùå WeatherManager: Permission GPS refus√©e d√©finitivement.');
            await _loadSitePrimaryCoordinates();
            return;
        }

        final Position position = await Geolocator.getCurrentPosition(
            desiredAccuracy: LocationAccuracy.high);
        _latitude = position.latitude;
        _longitude = position.longitude;
        _locationSource = LocationService.sourceDeviceLocation;
        debugPrint('‚úÖ WeatherManager: Coordonn√©es GPS obtenues pour la m√©t√©o: $_latitude, $_longitude');
        _safeAdd(_locationController, (_latitude!, _longitude!));
      } else { // 'site_primary' ou autre (par d√©faut)
        await _loadSitePrimaryCoordinates();
      }
    } catch (e) {
      debugPrint('‚ùå WeatherManager: Erreur chargement coordonn√©es pour la m√©t√©o: $e. Fallback sur les coordonn√©es du site.');
      // En cas d'erreur (ex: GPS d√©sactiv√©), fallback sur les coordonn√©es du site
      await _loadSitePrimaryCoordinates();
    } finally {
      _isLoadingLocation = false;
      // Notifier la fin du chargement, m√™me si pas de changement,
      // pour que l'UI puisse r√©agir √† la fin de l'indicateur de chargement.
      // Ne notifier que si ce n'est PAS l'initialisation
      if (!isInitializing) {
        notifyListeners();
      }
    }
  }

  // Nouvelle m√©thode helper pour charger les coordonn√©es primaires du site
  Future<void> _loadSitePrimaryCoordinates() async {
    debugPrint('üåç WeatherManager: Chargement des coordonn√©es principales du site pour la m√©t√©o...');
    final (latitude, longitude, source) = await _locationService.getSavedCoordinates();

    if (latitude != null && longitude != null) {
      if (_latitude != latitude || _longitude != longitude || _locationSource != source) {
        _latitude = latitude;
        _longitude = longitude;
        _locationSource = source;
        debugPrint(
            '‚úÖ WeatherManager: Coordonn√©es principales du site charg√©es pour la m√©t√©o: $_latitude, $_longitude (source: $_locationSource)');
        _safeAdd(_locationController, (_latitude!, _longitude!));
      }
    } else {
      _latitude = _latitude ?? 48.8566;
      _longitude = _longitude ?? 2.3522;
      _locationSource = _locationSource ?? LocationService.sourceDefault;
      debugPrint(
          '‚ö†Ô∏è WeatherManager: Aucune coordonn√©e principale trouv√©e, utilisation des valeurs de fallback pour la m√©t√©o.');
      _safeAdd(_locationController, (_latitude!, _longitude!));
    }
  }


  /// V√©rifie si les donn√©es en cache sont encore valides.
  bool _isCacheValid(DateTime? lastUpdate) {
    if (lastUpdate == null) return false;
    return DateTime.now().difference(lastUpdate) < _cacheValidityDuration;
  }

  /// R√©cup√®re les donn√©es m√©t√©o actuelles.
  Future<WeatherData?> getCurrentWeather({bool forceRefresh = true, bool isInitializing = false}) async {
    // Utiliser le cache si valide et non forc√©
    if (!forceRefresh &&
        _isCacheValid(_lastWeatherUpdate) &&
        _currentWeather != null) {
      debugPrint('üå§Ô∏è WeatherManager: Utilisation m√©t√©o cache.');
      return _currentWeather;
    }

    // √âviter les appels multiples
    if (_isLoadingWeather) {
      debugPrint('‚è≥ WeatherManager: Chargement m√©t√©o d√©j√† en cours...');
      return _currentWeather;
    }
    _isLoadingWeather = true;
    if (!isInitializing) {
      notifyListeners(); // Notifier d√©but chargement
    }

    WeatherData? resultData =
        _currentWeather; // Garder les anciennes donn√©es en cas d'erreur

    try {
      // S'assurer d'avoir des coordonn√©es
      if (_latitude == null || _longitude == null) await loadLocation(isInitializing: isInitializing);
      if (_latitude == null || _longitude == null) {
        throw Exception("Coordonn√©es non disponibles pour getCurrentWeather");
      }

      debugPrint(
          'üîÑ WeatherManager: Rafra√Æchissement m√©t√©o pour: $_latitude, $_longitude');
      final weatherData =
          await _weatherService.getCurrentWeather(_latitude!, _longitude!);

      // Mettre √† jour l'√©tat interne
      _currentWeather = weatherData;
      _lastWeatherUpdate = DateTime.now();
      resultData = weatherData; // Mettre √† jour le r√©sultat

      _safeAdd(_weatherController, _currentWeather); // Notifier les streams
      debugPrint(
          '‚úÖ WeatherManager: M√©t√©o M√†J: ${weatherData.temperature}¬∞C, ${weatherData.condition}');
    } catch (e) {
      debugPrint('‚ùå WeatherManager: Erreur r√©cup√©ration m√©t√©o: $e');
      // En cas d'erreur, on garde resultData qui contient les anciennes donn√©es (ou null)
    } finally {
      _isLoadingWeather = false;
      // Notifier la fin du chargement (potentiellement avec de nouvelles donn√©es ou les anciennes)
      if (!isInitializing) {
        notifyListeners();
      }
    }
    return resultData;
  }

  /// R√©cup√®re les pr√©visions m√©t√©o.
  Future<WeatherForecast?> getWeatherForecast(
      {bool forceRefresh = true, bool isInitializing = false}) async {
    final now = DateTime.now();
    // 1. Utiliser le cache interne si valide et non forc√©
    if (!forceRefresh &&
        _isCacheValid(_lastForecastUpdate) &&
        _weatherForecastInternal != null) {
      debugPrint('üå§Ô∏è WeatherManager: Utilisation pr√©visions cache (validit√© interne).');
      _safeAdd(_forecastController, _weatherForecastInternal); // <--- AJOUTEZ CETTE LIGNE
      return _weatherForecastInternal;
    }

    // 2. √âviter les appels API trop rapproch√©s (m√™me si forceRefresh=true)
    //    pour √©viter le spamming du bouton par exemple.
    const Duration minIntervalBetweenApiCall = Duration(minutes: 2);
    if (_lastForecastApiCall != null && now.difference(_lastForecastApiCall!) < minIntervalBetweenApiCall) {
   debugPrint('üå§Ô∏è WeatherManager: Appel API pr√©visions r√©cent (< ${minIntervalBetweenApiCall.inMinutes} min), utilisation donn√©es actuelles/cache.');
   if (_weatherForecastInternal != null) { // V√©rifier si des donn√©es existent avant de les pousser
     _safeAdd(_forecastController, _weatherForecastInternal); // <--- AJOUTEZ CETTE LIGNE (avec v√©rification)
   }
   return _weatherForecastInternal;
}


    // 3. √âviter les appels multiples si d√©j√† en cours
    if (_isLoadingForecast) {
      debugPrint('‚è≥ WeatherManager: Chargement pr√©visions d√©j√† en cours...');
      return _weatherForecastInternal;
    }
    _isLoadingForecast = true;
    if (!isInitializing) {
      notifyListeners(); // Notifier d√©but chargement
    }

    WeatherForecast? resultForecast = _weatherForecastInternal;

    try {
      // S'assurer d'avoir des coordonn√©es
      if (_latitude == null || _longitude == null) await loadLocation(isInitializing: isInitializing);
      if (_latitude == null || _longitude == null) {
        throw Exception("Coordonn√©es non disponibles pour getWeatherForecast");
      }

      debugPrint(
          'üîÑ WeatherManager: Rafra√Æchissement pr√©visions API pour: $_latitude, $_longitude');
      final forecast =
          await _weatherService.getWeatherForecast(_latitude!, _longitude!);

      // Mettre √† jour l'√©tat interne
      _weatherForecastInternal = forecast;
      _lastForecastUpdate = now; // Utiliser 'now' d√©fini au d√©but
      _lastForecastApiCall = now; // Mettre √† jour le timestamp du dernier appel API EFFECTIF
      resultForecast = forecast;

      _safeAdd(_forecastController,
          _weatherForecastInternal); // Notifier les streams
      debugPrint(
          '‚úÖ WeatherManager: Pr√©visions M√†J via API: ${forecast.hourlyForecast.length}h, ${forecast.dailyForecast.length}j');
    } catch (e) {
      debugPrint('‚ùå WeatherManager: Erreur r√©cup√©ration pr√©visions: $e');
    } finally {
      _isLoadingForecast = false;
      // Notifier la fin du chargement
      if (!isInitializing) {
        // Diff√©rer la notification √† la fin du frame courant
        WidgetsBinding.instance.addPostFrameCallback((_) {
          notifyListeners();
        });
      }
    }
    return resultForecast;
  }

  /// Obtient les pr√©visions historiques pour une date sp√©cifique (ne notifie pas les listeners).
  Future<WeatherData?> getHistoricalWeather(DateTime date) async {
    // Pas de gestion de cache ou d'√©tat de chargement ici car c'est un appel ponctuel
    try {
      if (_latitude == null || _longitude == null) await loadLocation();
      if (_latitude == null || _longitude == null) {
        throw Exception(
            "Coordonn√©es non disponibles pour getHistoricalWeather");
      }
      return await _weatherService.getHistoricalWeather(
          _latitude!, _longitude!, date);
    } catch (e) {
      debugPrint('‚ùå WeatherManager: Erreur r√©cup√©ration historique: $e');
      return null;
    }
  }

  /// Met √† jour les coordonn√©es et rafra√Æchit les donn√©es m√©t√©o si la localisation change.
  Future<void> updateLocationAndWeather() async { // Renommer ou cr√©er une nouvelle m√©thode si besoin
    // Cette m√©thode est appel√©e quand la pr√©f√©rence de source m√©t√©o change dans SettingsScreen
    // ou quand la localisation principale change dans LocationConfigurationScreen.
    // Elle doit recharger la localisation en fonction de la pr√©f√©rence, PUIS la m√©t√©o.
    debugPrint('üîÑ WeatherManager: updateLocationAndWeather called.');
    await loadLocation(); // loadLocation lit maintenant la pr√©f√©rence et charge les bonnes coordonn√©es

    // Si la localisation a effectivement chang√© ou si forc√©, rafra√Æchir la m√©t√©o
    if (_latitude != null && _longitude != null) { // Assurez-vous que les coordonn√©es sont valides
      await getCurrentWeather(forceRefresh: true);
      await getWeatherForecast(forceRefresh: true);
      debugPrint('üîÑ WeatherManager: Location and weather data refreshed.');
    } else {
      debugPrint('‚ö†Ô∏è WeatherManager: updateLocationAndWeather - Coordonn√©es non valides, m√©t√©o non rafra√Æchie.');
    }
  }


  /// M√©thode s√©curis√©e pour ajouter aux StreamControllers.
  void _safeAdd<T>(StreamController<T> controller, T data) {
    if (_areControllersClosed) {
      debugPrint(
          "‚ö†Ô∏è WeatherManager: Tentative d'ajout √† un StreamController apr√®s dispose().");
      return;
    }
    // Assurer l'initialisation si elle n'a pas eu lieu (s√©curit√©)
    if (!_areControllersInitialized) _initStreamControllers();

    if (!controller.isClosed) {
      controller.add(data);
    } else {
      debugPrint(
          "‚ö†Ô∏è WeatherManager: Tentative d'ajout √† un StreamController d√©j√† ferm√©.");
    }
  }

  /// Nettoie les ressources (StreamControllers).
  @override
  void dispose() {
    debugPrint("üßπ Disposing WeatherManager...");
    if (!_areControllersClosed && _areControllersInitialized) {
      try {
        _weatherController.close();
        _forecastController.close();
        _locationController.close();
        _areControllersClosed = true; // Marquer comme ferm√©
        debugPrint('üìä WeatherManager: StreamControllers ferm√©s.');
      } catch (e) {
        debugPrint('‚ùå WeatherManager: Erreur fermeture StreamControllers: $e');
      }
    }
    super.dispose(); // Important pour ChangeNotifier
    debugPrint("‚úÖ WeatherManager disposed.");
  }
}
