import 'package:flutter/foundation.dart';

/// Classe utilitaire pour la gestion des unit√©s de puissance et d'√©nergie
/// Centralise toutes les conversions et le formatage pour assurer la coh√©rence dans l'application
///
/// IMPORTANT : L'API SolarEdge retourne d√©j√† les valeurs en Watts (W), pas en kilowatts (kW).
/// Ne pas appliquer de conversion suppl√©mentaire sur les donn√©es brutes de l'API !
class PowerUtils {
  // Constantes pour la conversion d'unit√©s
  static const double _WATTS_TO_KILOWATTS = 0.001;
  static const double _KILOWATTS_TO_WATTS = 1000.0;
  
  /// Convertit une valeur de kW en W
  /// ATTENTION : √Ä utiliser uniquement si vous √™tes s√ªr que la valeur est en kW.
  /// Les donn√©es de l'API SolarEdge sont d√©j√† en W et ne n√©cessitent pas cette conversion.
  static double kWtoW(double powerInKW) {
    // V√©rifier que la valeur n'est pas n√©gative
    if (powerInKW < 0) {
      debugPrint('‚ö†Ô∏è Tentative de conversion d\'une valeur n√©gative de kW √† W: $powerInKW');
      return 0.0;
    }
    
    final result = powerInKW * _KILOWATTS_TO_WATTS;
    debugPrint('üîÑ Conversion kW ‚Üí W: $powerInKW kW ‚Üí $result W');
    return result;
  }
  
  /// Convertit une valeur de W en kW
  static double WtokW(double powerInW) {
    // V√©rifier que la valeur n'est pas n√©gative
    if (powerInW < 0) {
      debugPrint('‚ö†Ô∏è Tentative de conversion d\'une valeur n√©gative de W √† kW: $powerInW');
      return 0.0;
    }
    
    final result = powerInW * _WATTS_TO_KILOWATTS;
    debugPrint('üîÑ Conversion W ‚Üí kW: $powerInW W ‚Üí $result kW');
    return result;
  }
  
  /// Convertit l'√©nergie en Wh (watt-heures) vers kWh (kilowatt-heures)
  static double WhTokWh(double energyInWh) {
    // V√©rifier que la valeur n'est pas n√©gative
    if (energyInWh < 0) {
      debugPrint('‚ö†Ô∏è Tentative de conversion d\'une valeur n√©gative de Wh √† kWh: $energyInWh');
      return 0.0;
    }
    
    return energyInWh * _WATTS_TO_KILOWATTS;
  }
  
  /// Convertit l'√©nergie en kWh (kilowatt-heures) vers Wh (watt-heures)
  static double kWhToWh(double energyInkWh) {
    // V√©rifier que la valeur n'est pas n√©gative
    if (energyInkWh < 0) {
      debugPrint('‚ö†Ô∏è Tentative de conversion d\'une valeur n√©gative de kWh √† Wh: $energyInkWh');
      return 0.0;
    }
    
    return energyInkWh * _KILOWATTS_TO_WATTS;
  }
  
  /// Formate une valeur de puissance en W pour l'affichage
  static String formatWatts(double powerInW, {int decimals = 2}) {
    // Arrondir √† N d√©cimales et formater
    final formattedValue = powerInW.toStringAsFixed(decimals);
    return '$formattedValue W';
  }
  
  /// Formate une valeur d'√©nergie en kWh pour l'affichage
  static String formatEnergyKWh(double energyInWh, {int decimals = 2}) {
    // Convertir en kWh, arrondir √† N d√©cimales et formater
    final energyInkWh = WhTokWh(energyInWh);
    final formattedValue = energyInkWh.toStringAsFixed(decimals);
    return '$formattedValue kWh';
  }
  
  /// Calcule le pourcentage par rapport √† une puissance maximale
  static double calculatePowerPercentage(double currentPowerW, double maxPowerW) {
    if (maxPowerW <= 0) {
      debugPrint('‚ö†Ô∏è Calcul de pourcentage avec une puissance maximale invalide: $maxPowerW');
      return 0.0;
    }
    
    // Limiter le pourcentage √† 1.0 (100%)
    final percentage = (currentPowerW / maxPowerW).clamp(0.0, 1.0);
    return percentage;
  }
  
  /// Obtient une estimation de la puissance cr√™te de l'installation
  /// Bas√©e sur les donn√©es stock√©es ou une valeur par d√©faut
  static double getDefaultPeakPowerW() {
    // Par d√©faut, on suppose une installation de 10kW
    return 10000.0; // 10kW = 10000W
  }
}
