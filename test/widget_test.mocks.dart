// Mocks generated by Mockito 5.4.5 from annotations
// in solaredge_monitor/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i14;

import 'package:firebase_auth/firebase_auth.dart' as _i2;
import 'package:flutter/foundation.dart' as _i3;
import 'package:flutter/material.dart' as _i8;
import 'package:flutter_local_notifications/flutter_local_notifications.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i17;
import 'package:shared_preferences/shared_preferences.dart' as _i21;
import 'package:solaredge_monitor/data/models/notification_model.dart' as _i10;
import 'package:solaredge_monitor/data/models/solar_data.dart' as _i4;
import 'package:solaredge_monitor/data/models/user_preferences.dart' as _i12;
import 'package:solaredge_monitor/data/models/weather_data.dart' as _i19;
import 'package:solaredge_monitor/data/services/ai_service.dart' as _i16;
import 'package:solaredge_monitor/data/services/assistant_service.dart' as _i13;
import 'package:solaredge_monitor/data/services/auth_service.dart' as _i11;
import 'package:solaredge_monitor/data/services/location_service.dart' as _i20;
import 'package:solaredge_monitor/data/services/notification_service.dart'
    as _i6;
import 'package:solaredge_monitor/data/services/service_manager.dart' as _i15;
import 'package:solaredge_monitor/data/services/solaredge_api_service.dart'
    as _i5;
import 'package:solaredge_monitor/data/services/weather_manager.dart' as _i18;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserCredential_0 extends _i1.SmartFake
    implements _i2.UserCredential {
  _FakeUserCredential_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValueNotifier_1<T> extends _i1.SmartFake
    implements _i3.ValueNotifier<T> {
  _FakeValueNotifier_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSolarData_2 extends _i1.SmartFake implements _i4.SolarData {
  _FakeSolarData_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDailySolarData_3 extends _i1.SmartFake
    implements _i4.DailySolarData {
  _FakeDailySolarData_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMonthlySolarData_4 extends _i1.SmartFake
    implements _i4.MonthlySolarData {
  _FakeMonthlySolarData_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeYearlySolarData_5 extends _i1.SmartFake
    implements _i4.YearlySolarData {
  _FakeYearlySolarData_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeeklySolarData_6 extends _i1.SmartFake
    implements _i5.WeeklySolarData {
  _FakeWeeklySolarData_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSolarDataRange_7 extends _i1.SmartFake
    implements _i5.SolarDataRange {
  _FakeSolarDataRange_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i6.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int generateNotifId() => (super.noSuchMethod(
        Invocation.method(
          #generateNotifId,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i7.Future<void> initialize(_i8.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [context],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> showBackgroundNotification({
    required int? id,
    required String? title,
    required String? body,
    required String? payload,
    _i9.AndroidNotificationChannel? channel =
        const _i9.AndroidNotificationChannel(
      'solaredge_channel_id',
      'Alertes SolarEdge',
      description:
          'Notifications importantes concernant votre production solaire.',
      importance: _i9.Importance.max,
    ),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showBackgroundNotification,
          [],
          {
            #id: id,
            #title: title,
            #body: body,
            #payload: payload,
            #channel: channel,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<bool> requestNotificationPermission(_i8.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestNotificationPermission,
          [context],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<void> markNotificationAsRead(String? notificationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #markNotificationAsRead,
          [notificationId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteNotification(String? notificationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteNotification,
          [notificationId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteAllReadNotifications() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllReadNotifications,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteAllNotifications() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllNotifications,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  List<_i10.NotificationModel> getAllNotifications() => (super.noSuchMethod(
        Invocation.method(
          #getAllNotifications,
          [],
        ),
        returnValue: <_i10.NotificationModel>[],
      ) as List<_i10.NotificationModel>);

  @override
  _i7.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i11.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Stream<_i2.User?> get authStateChanges => (super.noSuchMethod(
        Invocation.getter(#authStateChanges),
        returnValue: _i7.Stream<_i2.User?>.empty(),
      ) as _i7.Stream<_i2.User?>);

  @override
  _i7.Future<_i2.UserCredential> signInWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue: _i7.Future<_i2.UserCredential>.value(_FakeUserCredential_0(
          this,
          Invocation.method(
            #signInWithGoogle,
            [],
          ),
        )),
      ) as _i7.Future<_i2.UserCredential>);

  @override
  _i7.Future<_i2.UserCredential> signInWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailAndPassword,
          [
            email,
            password,
          ],
        ),
        returnValue: _i7.Future<_i2.UserCredential>.value(_FakeUserCredential_0(
          this,
          Invocation.method(
            #signInWithEmailAndPassword,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i7.Future<_i2.UserCredential>);

  @override
  _i7.Future<_i2.UserCredential> signInAnonymously() => (super.noSuchMethod(
        Invocation.method(
          #signInAnonymously,
          [],
        ),
        returnValue: _i7.Future<_i2.UserCredential>.value(_FakeUserCredential_0(
          this,
          Invocation.method(
            #signInAnonymously,
            [],
          ),
        )),
      ) as _i7.Future<_i2.UserCredential>);

  @override
  _i7.Future<_i2.UserCredential> registerWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerWithEmailAndPassword,
          [
            email,
            password,
          ],
        ),
        returnValue: _i7.Future<_i2.UserCredential>.value(_FakeUserCredential_0(
          this,
          Invocation.method(
            #registerWithEmailAndPassword,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i7.Future<_i2.UserCredential>);

  @override
  _i7.Future<void> saveApiPreferencesForCurrentUser(
          _i12.UserPreferences? preferences) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveApiPreferencesForCurrentUser,
          [preferences],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> resetPassword(String? email) => (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [email],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateUserProfile({
    String? displayName,
    String? photoURL,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserProfile,
          [],
          {
            #displayName: displayName,
            #photoURL: photoURL,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> sendEmailVerification() => (super.noSuchMethod(
        Invocation.method(
          #sendEmailVerification,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateEmail(String? newEmail) => (super.noSuchMethod(
        Invocation.method(
          #updateEmail,
          [newEmail],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updatePassword(String? newPassword) => (super.noSuchMethod(
        Invocation.method(
          #updatePassword,
          [newPassword],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<String?> getFCMToken() => (super.noSuchMethod(
        Invocation.method(
          #getFCMToken,
          [],
        ),
        returnValue: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);
}

/// A class which mocks [AssistantService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssistantService extends _i1.Mock implements _i13.AssistantService {
  MockAssistantService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i13.QuickIntent> get quickIntents => (super.noSuchMethod(
        Invocation.getter(#quickIntents),
        returnValue: <_i13.QuickIntent>[],
      ) as List<_i13.QuickIntent>);

  @override
  List<_i13.AssistantInsight> get insights => (super.noSuchMethod(
        Invocation.getter(#insights),
        returnValue: <_i13.AssistantInsight>[],
      ) as List<_i13.AssistantInsight>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i13.PeriodRange? smartParse(String? text) =>
      (super.noSuchMethod(Invocation.method(
        #smartParse,
        [text],
      )) as _i13.PeriodRange?);

  @override
  _i7.Future<void> processUserText(String? text) => (super.noSuchMethod(
        Invocation.method(
          #processUserText,
          [text],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> generateInsights() => (super.noSuchMethod(
        Invocation.method(
          #generateInsights,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void clearInsights() => super.noSuchMethod(
        Invocation.method(
          #clearInsights,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i14.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i14.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ServiceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockServiceManager extends _i1.Mock implements _i15.ServiceManager {
  MockServiceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set assistantService(_i13.AssistantService? service) => super.noSuchMethod(
        Invocation.setter(
          #assistantService,
          service,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set aiService(_i16.AiService? service) => super.noSuchMethod(
        Invocation.setter(
          #aiService,
          service,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Stream<_i5.SolarEdgeApiService?> get apiConfigChangedStream =>
      (super.noSuchMethod(
        Invocation.getter(#apiConfigChangedStream),
        returnValue: _i7.Stream<_i5.SolarEdgeApiService?>.empty(),
      ) as _i7.Stream<_i5.SolarEdgeApiService?>);

  @override
  bool get isApiConfigured => (super.noSuchMethod(
        Invocation.getter(#isApiConfigured),
        returnValue: false,
      ) as bool);

  @override
  _i3.ValueNotifier<_i5.SolarEdgeApiService?> get apiServiceNotifier =>
      (super.noSuchMethod(
        Invocation.getter(#apiServiceNotifier),
        returnValue: _FakeValueNotifier_1<_i5.SolarEdgeApiService?>(
          this,
          Invocation.getter(#apiServiceNotifier),
        ),
      ) as _i3.ValueNotifier<_i5.SolarEdgeApiService?>);

  @override
  _i3.ValueNotifier<_i12.UserPreferences?> get userPreferencesNotifier =>
      (super.noSuchMethod(
        Invocation.getter(#userPreferencesNotifier),
        returnValue: _FakeValueNotifier_1<_i12.UserPreferences?>(
          this,
          Invocation.getter(#userPreferencesNotifier),
        ),
      ) as _i3.ValueNotifier<_i12.UserPreferences?>);

  @override
  _i7.Future<void> initializeCoreServices() => (super.noSuchMethod(
        Invocation.method(
          #initializeCoreServices,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i5.SolarEdgeApiService?> initializeApiServiceFromPreferences() =>
      (super.noSuchMethod(
        Invocation.method(
          #initializeApiServiceFromPreferences,
          [],
        ),
        returnValue: _i7.Future<_i5.SolarEdgeApiService?>.value(),
      ) as _i7.Future<_i5.SolarEdgeApiService?>);

  @override
  void notifyApiConfigChanged() => super.noSuchMethod(
        Invocation.method(
          #notifyApiConfigChanged,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SolarEdgeApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSolarEdgeApiService extends _i1.Mock
    implements _i5.SolarEdgeApiService {
  MockSolarEdgeApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  String get apiKey => (super.noSuchMethod(
        Invocation.getter(#apiKey),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.getter(#apiKey),
        ),
      ) as String);

  @override
  String get siteId => (super.noSuchMethod(
        Invocation.getter(#siteId),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.getter(#siteId),
        ),
      ) as String);

  @override
  _i7.Future<bool> checkConnection() => (super.noSuchMethod(
        Invocation.method(
          #checkConnection,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<_i4.SolarData> getCurrentPowerData() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentPowerData,
          [],
        ),
        returnValue: _i7.Future<_i4.SolarData>.value(_FakeSolarData_2(
          this,
          Invocation.method(
            #getCurrentPowerData,
            [],
          ),
        )),
      ) as _i7.Future<_i4.SolarData>);

  @override
  _i7.Future<double> getEnergyProducedToday() => (super.noSuchMethod(
        Invocation.method(
          #getEnergyProducedToday,
          [],
        ),
        returnValue: _i7.Future<double>.value(0.0),
      ) as _i7.Future<double>);

  @override
  _i7.Future<_i4.DailySolarData> getDailyEnergy(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDailyEnergy,
          [date],
        ),
        returnValue: _i7.Future<_i4.DailySolarData>.value(_FakeDailySolarData_3(
          this,
          Invocation.method(
            #getDailyEnergy,
            [date],
          ),
        )),
      ) as _i7.Future<_i4.DailySolarData>);

  @override
  _i7.Future<List<_i4.SolarData>> getPowerDetailsForDate(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPowerDetailsForDate,
          [date],
        ),
        returnValue: _i7.Future<List<_i4.SolarData>>.value(<_i4.SolarData>[]),
      ) as _i7.Future<List<_i4.SolarData>>);

  @override
  _i7.Future<_i4.MonthlySolarData> getMonthlyEnergy(DateTime? month) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMonthlyEnergy,
          [month],
        ),
        returnValue:
            _i7.Future<_i4.MonthlySolarData>.value(_FakeMonthlySolarData_4(
          this,
          Invocation.method(
            #getMonthlyEnergy,
            [month],
          ),
        )),
      ) as _i7.Future<_i4.MonthlySolarData>);

  @override
  _i7.Future<_i4.YearlySolarData> getYearlyEnergy(int? year) =>
      (super.noSuchMethod(
        Invocation.method(
          #getYearlyEnergy,
          [year],
        ),
        returnValue:
            _i7.Future<_i4.YearlySolarData>.value(_FakeYearlySolarData_5(
          this,
          Invocation.method(
            #getYearlyEnergy,
            [year],
          ),
        )),
      ) as _i7.Future<_i4.YearlySolarData>);

  @override
  _i7.Future<Map<String, dynamic>> getSiteDetails() => (super.noSuchMethod(
        Invocation.method(
          #getSiteDetails,
          [],
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<_i5.WeeklySolarData> getWeeklyEnergy(DateTime? dateInWeek) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeeklyEnergy,
          [dateInWeek],
        ),
        returnValue:
            _i7.Future<_i5.WeeklySolarData>.value(_FakeWeeklySolarData_6(
          this,
          Invocation.method(
            #getWeeklyEnergy,
            [dateInWeek],
          ),
        )),
      ) as _i7.Future<_i5.WeeklySolarData>);

  @override
  _i7.Future<(double?, double?)> geocodeSiteAddress(
          Map<String, dynamic>? locationData) =>
      (super.noSuchMethod(
        Invocation.method(
          #geocodeSiteAddress,
          [locationData],
        ),
        returnValue: _i7.Future<(double?, double?)>.value((null, null)),
      ) as _i7.Future<(double?, double?)>);

  @override
  _i7.Future<_i5.SolarDataRange> getEnergyRange(
    DateTime? startDate,
    DateTime? endDate, {
    required String? timeUnit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEnergyRange,
          [
            startDate,
            endDate,
          ],
          {#timeUnit: timeUnit},
        ),
        returnValue: _i7.Future<_i5.SolarDataRange>.value(_FakeSolarDataRange_7(
          this,
          Invocation.method(
            #getEnergyRange,
            [
              startDate,
              endDate,
            ],
            {#timeUnit: timeUnit},
          ),
        )),
      ) as _i7.Future<_i5.SolarDataRange>);
}

/// A class which mocks [WeatherManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherManager extends _i1.Mock implements _i18.WeatherManager {
  MockWeatherManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Stream<_i19.WeatherData?> get weatherStream => (super.noSuchMethod(
        Invocation.getter(#weatherStream),
        returnValue: _i7.Stream<_i19.WeatherData?>.empty(),
      ) as _i7.Stream<_i19.WeatherData?>);

  @override
  _i7.Stream<_i19.WeatherForecast?> get forecastStream => (super.noSuchMethod(
        Invocation.getter(#forecastStream),
        returnValue: _i7.Stream<_i19.WeatherForecast?>.empty(),
      ) as _i7.Stream<_i19.WeatherForecast?>);

  @override
  _i7.Stream<(double, double)?> get locationStream => (super.noSuchMethod(
        Invocation.getter(#locationStream),
        returnValue: _i7.Stream<(double, double)?>.empty(),
      ) as _i7.Stream<(double, double)?>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> loadLocation({bool? isInitializing = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadLocation,
          [],
          {#isInitializing: isInitializing},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i19.WeatherData?> getCurrentWeather({
    bool? forceRefresh = true,
    bool? isInitializing = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentWeather,
          [],
          {
            #forceRefresh: forceRefresh,
            #isInitializing: isInitializing,
          },
        ),
        returnValue: _i7.Future<_i19.WeatherData?>.value(),
      ) as _i7.Future<_i19.WeatherData?>);

  @override
  _i7.Future<_i19.WeatherForecast?> getWeatherForecast({
    bool? forceRefresh = true,
    bool? isInitializing = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeatherForecast,
          [],
          {
            #forceRefresh: forceRefresh,
            #isInitializing: isInitializing,
          },
        ),
        returnValue: _i7.Future<_i19.WeatherForecast?>.value(),
      ) as _i7.Future<_i19.WeatherForecast?>);

  @override
  _i7.Future<_i19.WeatherData?> getHistoricalWeather(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHistoricalWeather,
          [date],
        ),
        returnValue: _i7.Future<_i19.WeatherData?>.value(),
      ) as _i7.Future<_i19.WeatherData?>);

  @override
  _i7.Future<void> updateLocationAndWeather() => (super.noSuchMethod(
        Invocation.method(
          #updateLocationAndWeather,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i14.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i14.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i20.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<(double?, double?, String?)> getSavedCoordinates() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSavedCoordinates,
          [],
        ),
        returnValue:
            _i7.Future<(double?, double?, String?)>.value((null, null, null)),
      ) as _i7.Future<(double?, double?, String?)>);

  @override
  _i7.Future<bool> saveCoordinates(
    double? latitude,
    double? longitude,
    String? source, {
    bool? isSiteAddressCoordinates = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveCoordinates,
          [
            latitude,
            longitude,
            source,
          ],
          {#isSiteAddressCoordinates: isSiteAddressCoordinates},
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<(double?, double?, String?)> getSavedSiteAddressCoordinates() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSavedSiteAddressCoordinates,
          [],
        ),
        returnValue:
            _i7.Future<(double?, double?, String?)>.value((null, null, null)),
      ) as _i7.Future<(double?, double?, String?)>);

  @override
  _i7.Future<bool> saveSiteAddress(Map<String, dynamic>? addressData) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSiteAddress,
          [addressData],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<String?> getSavedAddress() => (super.noSuchMethod(
        Invocation.method(
          #getSavedAddress,
          [],
        ),
        returnValue: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);

  @override
  _i7.Future<Map<String, dynamic>> getSavedAddressComponents() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSavedAddressComponents,
          [],
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<bool> saveAddressComponents(Map<String, String>? components) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAddressComponents,
          [components],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<(double?, double?)> geocodeAddress(
          Map<String, dynamic>? addressData) =>
      (super.noSuchMethod(
        Invocation.method(
          #geocodeAddress,
          [addressData],
        ),
        returnValue: _i7.Future<(double?, double?)>.value((null, null)),
      ) as _i7.Future<(double?, double?)>);

  @override
  _i7.Future<(double?, double?)> getCurrentLocation() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentLocation,
          [],
        ),
        returnValue: _i7.Future<(double?, double?)>.value((null, null)),
      ) as _i7.Future<(double?, double?)>);

  @override
  _i7.Future<bool> saveManualCoordinates(
    double? latitude,
    double? longitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveManualCoordinates,
          [
            latitude,
            longitude,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> clearLocationData() => (super.noSuchMethod(
        Invocation.method(
          #clearLocationData,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i21.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i7.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}
